<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Llm on Johanns Blog</title>
    <link>http://localhost:1313/tags/llm/</link>
    <description>Recent content in Llm on Johanns Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Aug 2024 10:00:00 +0200</lastBuildDate><atom:link href="http://localhost:1313/tags/llm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vision Language Models</title>
      <link>http://localhost:1313/posts/2024-08-23-vision-language-models/</link>
      <pubDate>Fri, 23 Aug 2024 10:00:00 +0200</pubDate>
      
      <guid>http://localhost:1313/posts/2024-08-23-vision-language-models/</guid>
      <description>LLMs are boring but VLMs are awesome, let&amp;rsquo;s see why.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p align="justify">
Vision Language Models (VLM) are multimodal models that can learn from text and images and generate text as an output (some are able to generate images too). Typical use cases for this range from image chatting, image recognition, visual question answering to image captioning, document understanding and more. In addition to that some models are also able to perform object detection, segmentation or reasoning about relative positions of objects (which is kinda fire).
</p>
<p align="justify">
The focus of this post lies on open source models just because we have information about their architecture, datasets and training processes. VLMs currently are far from being perfect, there exist a lot of open questions, challenges when building them and problems that have to be addressed e.g.:
</p>
<ul>
<li>bad understanding of spatial relationships</li>
<li>bad at counting (without complicated engineering overhead that relies on additional data annotation or other hacks)</li>
<li>lack understanding of attributes and ordering</li>
<li>ignorance of parts of the input prompt (need for a lot of prompt engineering to produce the results you want)</li>
<li>hallucinations (like in LLMs)</li>
</ul> 
<p align="justify">
In the following I will categorize them by their training paradigm like in [2] and will go over some prominent examples. There exist way to many models to cover them all so if this overview here isn't enough and you want more information check out <a href="https://huggingface.co/models?pipeline_tag=image-text-to-text&sort=trending">huggingface models</a>, this cool <a href="https://huggingface.co/collections/merve/vision-language-models-papers-66264531f7152ac0ec80ceca">paper collection</a> or <a href="https://paperswithcode.com/">paperswithcode</a>. 
</p>
<h2 id="families-of-vlms">Families of VLMs</h2>
<p align="justify">
One way to categorize VLMs is based on the training paradigm like in [2]:
</p>
<ul>
<li><b>contrastive</b>: Leverage pairs of positive and negative examples.</li>
<li><b>masking</b>: Leverage reconstruction of masked image patches given some unmasked text.</li>
<li><b>pretrained backbones</b>: Combine a pretrained LLM with a pretrained image encoder and then learn a mapping between those two.</li>
<li><b>generative</b>: Generate captions and images.</li>
</ul>
<figure class="align-center ">
    <img loading="lazy" src="/imgs/vlms/families_of_vlms.png#center"
         alt="Families of Vision Language Models" width="90%"/> <figcaption>
            <p>Figure 1. Families of VLMs [2]</p>
        </figcaption>
</figure>

<p align="justify">
The paradigms are not mutually exclusive and many approaches we explore in this post rely on a mix of those training strategies. In the following we will describe some approaches for each paradigm.
</p>
<h3 id="contrastive-based-methods">Contrastive-based Methods</h3>
<p align="justify">
In this section I am presenting two contrastive-based VLMs, the very popular CLIP model from OpenAI and one of the successor models from Meta called Llip.
</p>
<h4 id="clip">CLIP</h4>
<p align="justify">
CLIP (<b>C</b>ontrastive <b>L</b>anguage <b>I</b>mage <b>P</b>re-training) was one of those models created by OpenAI which were really open (you know back in the days OpenAI was really open and cool). The pre-training task here was not to predict the exact caption for each image but to predict which whole caption to pair with a certain image. This switch from a predictive objective (so the classic ML approach with labels) to a contrastive one lead to a 4x efficiency improvement. To train this model the authors leveraged captions from the internet and collected a huge dataset of 400 million image-text-pairs which they called WIT for WebImageText. Another advantage of prediction captions instead of e.g. classes was a better and more flexible zero-shot transfer capability of the model. The figure down below gives a good overview of the approach.
</p>
<figure class="align-center ">
    <img loading="lazy" src="/imgs/vlms/clip.png#center"
         alt="CLIP approach overview" width="100%"/> <figcaption>
            <p>Figure 2. CLIP approach overview [3]</p>
        </figcaption>
</figure>

<p align="justify">
The CLIP model is trained using a batch of $N$ image-text pairs. The training objective is to predict which of the $NÃ—N$ possible image-text pairings within the batch actually occurred. To achieve this, CLIP learns a multimodal embedding space by jointly training an image encoder and a text encoder. The goal is to maximize the cosine similarity between the image and text embeddings of the $N$ correct (real) pairs in the batch while minimizing the cosine similarity for the incorrect pairings. For optimization, a symmetric cross-entropy loss, also known as InfoNCE loss, is applied to the similarity scores. The following pseudocode outlines this procedure.
</p>
<figure class="align-center ">
    <img loading="lazy" src="/imgs/vlms/clip_code.png#center"
         alt="CLIP training pseudocode" width="60%"/> <figcaption>
            <p>Figure 3. CLIP training pseudocode [3]</p>
        </figcaption>
</figure>

<p align="justify">
As the image encoder, the authors trained 5 ResNet and 3 ViT versions and found the ViT-L/14@336px version to perform the best. The text encoder is a 63M parameter Transformer (12 layers) with a vocab size of ~49K. The model showed strong zero-shot performance on ImageNet classification task (same as the original ResNet50). Some of the limitations of CLIP were e.g. that the zero-shot performance on more finegrained vision tasks was quite bad (like differenciating between different car models), on some tasks it was random (like counting objects) and it was not as good as you would expect on simple out of distribution tasks like MNIST (just 88% accuracy).  
</p>
<h4 id="llip">Llip</h4>
<p align="justify">
One of the problems with CLIP was, that there are a thousand ways to caption an image, based on the fact that the caption could describe only specific regions of an image or specific objects. To better model the visual richness of an image, a training objective of a vision language model should aim to capture all the possible text descriptions. This is what the authors of Llip, <b>L</b>atent <b>L</b>anguage <b>I</b>mage <b>P</b>retraining, try to do. To enable the prediction of different representations from a fixed image, they implemented the image-to-text representation function as a one-to-many mapping. This is achieved by augmenting the visual encoder with a latent variable that captures context information. The contextual latent is inferred from the caption and used to modulate the representation. The visual encoder is implemented as a Vision Transformer that outputs $K$ learnable mixture tokens in addition to the visual tokens. These mixture tokens should capture different visual aspects of an image. Figure 4 down below shows this simple modification of CLIP.
</p>
<figure class="align-center ">
    <img loading="lazy" src="/imgs/vlms/clip_vs_llip.png#center"
         alt="CLIP vs. Llip" width="80%"/> <figcaption>
            <p>Figure 4. CLIP vs. Llip [4]</p>
        </figcaption>
</figure>

<p align="justify">
The authors added a cross-attention mechanism to infer the mixture token weights as a function of the text caption. The weighted mixture defines the contextual representation that is contrasted with text representations. This leads to significant improvement of the visual representation quality as well as a more rich visual representation.
</p>
<figure class="align-center ">
    <img loading="lazy" src="/imgs/vlms/llip_cross_attention.png#center"
         alt="Llip Cross Attention mechanism" width="90%"/> <figcaption>
            <p>Figure 5. Llip cross-attention mechanism [4]</p>
        </figcaption>
</figure>

<p align="justify">
On zero-shot transfer classification, Llip consistently outperforms CLIP pretraining for architecture of similar size on a large set of benchmarks. Especially on zero-shot image-text and text-image retrieval, Llip consistently outperforms CLIP pretraining on COCO by 6.0% image-to-text retrieval.
</p>
<h3 id="vlms-with-masking-objectives">VLMs with Masking Objectives</h3>
<p align="justify">
Masking is a commonly used technique in deep learning research. It can be viewed as a specific form of denoising autoencoder in which the noise has a spatial structure. In 2019 the authors of the BERT paper used Masked-Language-Modeling (MLM) to predict missing text tokens in a sentence. More recently the same concept (Masked-Image-Modeling) was used in the vision space to learn strong visual representations like in I-JEPA. In the following we are going through two approaches that combined those techniques to train a VLM, FLAVA [5] and MaskVLM [6].
</p>
<h4 id="flava">FLAVA</h4>
<p align="justify">
Contrastive methods like CLIP aren't easy usable on multimodal problems that require dealing with both modalities at the same time. Many of the more recent models that rely on early fusion and shared self-attention across modalities often perform very bad on vision-only or language-only tasks. The goal of the authors was to create a single "foundation" model that is good at vision tasks, language tasks and cross- and multi-modal tasks. FLAVA consists of three models, an image encoder, a text encoder and a multimodal encoder that takes as input the encoded image and text and integrates their represenations for multimodal reasoning.
</p>
<p align="justify">
The image encoder is a ViT-B/16 model with a fixed image size. It outputs is a list of hidden state vectors $\{h_{I}\}$, each corresponding to an image patch, and a classification token $h_{CLS,I}$. The text encoder has the same architecture as the vision part and outputs a hidden state vector $\{h_{T}\}$ and a text classification token $h_{CLS,T}$. The multimodal encoder also is a transformer model that fuses image and text hidden states. Over each of the hidden state vectors generated by the image and text encoder two learned linear projections are applied and an additional $[CLS_M]$ token is added before feeding this into the multimodal encoder. Like the text and image encoders, the multimodal encoder also outputs a list of hidden state vectors $\{h_{M}\}$ and a vector $h_{CLS,M}$ for the classification token. 
</p>
<figure class="align-center ">
    <img loading="lazy" src="/imgs/vlms/flava_overview.png#center"
         alt="Overview of the FLAVA model architecture" width="100%"/> <figcaption>
            <p>Figure 6. Overview of the FLAVA model architecture [5]</p>
        </figcaption>
</figure>

<p align="justify">
The training process consists of a joint pretraining on both unimodal and multimodal data. First the authors pretrained the text encoder, then the image encoder and then they used both pretrained encoders to train the multimodal encoder. 
For the unimodal pretraining they used established loss components. For the image encoder they used a masked image modeling (MIM) objective like in BEiT. First they tokenize the image patches with a dVAE tokenizer, then they used a classifier on top of the image encoder outputs to predict the missing tokens. Masked language modeling (MLM) was used for the text encoder as an objective with 15% of text tokens masked. For the multimodal pretraining three loss components were used:
</p>
<ul>
<li><b>Global contrastive</b> (GC) loss, like in CLIP</li>
<li><b>Masked Multimodal Modeling</b> (MMM) loss, masking of both the image patches and text tokens</li>
<li><b>Image Text Matching</b> (ITM) loss, by applying a classifier on top of the multimodal encoder to decide if the input image and text match to each other</li>
</ul>
<p align="justify">
One of the cool things of this paper is, that the authors only used public unimodal and multimodal datasets for training, 70 million image-text pairs in total (but the avg. text length was just 12 words). The validated FLAVA on 35 tasks across vision, NLP and multimodal domains and performed better or competitive on all of those tasks with the state of the art models at that time which were mostly trained on much larger and probably cleaner datasets. 
</p>
<h4 id="maskvlm">MaskVLM</h4>
<p align="justify">
Instead of developing masked language modeling (MLM) and masked image modeling (MIM) independently, the authors propose to build joint masked vision and language modeling, where the masked signal of one modality is reconstructed with the help from another modality. The masked signal reconstruction of one modality conditioned on another modality can also implicitly learn cross-modal alignment between language tokens and image patches. This works especially well in scenarios with limited data. Figure 7 illustrates the difference between this new paradigm and the classic MIM and MLM based approaches.
</p>
<figure class="align-center ">
    <img loading="lazy" src="/imgs/vlms/maskvlm_idea.png#center"
         alt="Left MIM and MLM and right the MaskVLM idea" width="85%"/> <figcaption>
            <p>Figure 7. Left: MIM &amp; MLM; Right: Masked Vision Language Modeling [6]</p>
        </figcaption>
</figure>

<p align="justify">
There are two main types of pre-training objectives in this model. The first is masked vision and language modeling. Here, transformer-based models are used as image and text encoders to extract features from both modalities. These features are then processed by image and text cross-modality encoders, which consist of three cross-attention blocks. These blocks allow the text and image features to interact, enhancing the representation of each by leveraging information from the other. The second objective is multimodal alignment, which includes image-text contrastive learning (ITC) and image-text matching (ITM). These methods align the representations of images and text to ensure they correspond accurately. For more detailed information, you can refer to the original paper.
</p>
<figure class="align-center ">
    <img loading="lazy" src="/imgs/vlms/maskvlm_architecture.png#center"
         alt="MaskVLM model architecture" width="90%"/> <figcaption>
            <p>Figure 8. Overview of the MaskVLM model architecture [6]</p>
        </figcaption>
</figure>

<p align="justify">
MaskVLM is very data efficient, it especially shines in limited data scenarios where only âˆ¼40% of data used by the state-of-the-art models is sufficient to match their performance.
</p>
<h3 id="generative-based-vlms">Generative-based VLMs</h3>
<p align="justify">
In contrast to the paradigms above, that mostly operate on latent representations we will now look at generative VLM that are trained to generate text and images. We are looking at two methods in more detail, <b>CoCa</b> which learns to generate text and <b>Chameleon</b> which is a multimodal generative model that can generate text and images. Before we delve deeper I will list some of the advantages of generative classifiers and why this training paradigm can be a good idea: 
</p>
<ul>
<li>more effective robustness which means better out-of-distribution performance</li>
<li>better on compositional reasoning tasks than discriminative methods like CLIP</li> 
<li>more shape bias and better alignment with human judgement</li>
<li>can be jointly adapted with discriminative models at test time using only unlabeled test samples which improves classification, segmentation and depth prediction performance</li>
</ul>
<h4 id="coca">CoCa</h4>
<ul>
<li><b>Co</b>ntrastive <b>Ca</b>ptioner (CoCa) is an image-text encoder-decoder foundation model pretrained jointly with a contrastive and a captioning loss, which makes it a combination of contrastive approaches like CLIP and generative methods.</li>
<li>decoder is decoupled into two parts, a unimodal decoder and a multimodal decoder</li>
<li>omit cross-attention in unimodal decoder layers to encode text-only representations, and cascade multimodal decoder layers cross-attending to image encoder outputs to learn multimodal image-text representation</li>
</ul>
<p align="justify">
</p>
<figure class="align-center ">
    <img loading="lazy" src="/imgs/vlms/coca_architecture.png#center"
         alt="CoCa model architecture, training objectives and pseudocode" width="100%"/> <figcaption>
            <p>Figure 9. Overview of the CoCa model architecture and training objectives [10]</p>
        </figcaption>
</figure>

<p align="justify">
- quick transfer to downstream tasks with zero-shot transfer or minimal task adaptation
</p>
<h4 id="cm3leon">CM3leon</h4>
<p align="justify">
- retrieval augmented, token based, decoder-only multimodal model capable of generating text and images
- uses the CM3 model architecture as basis and benefits a lot from scaling and instruction tuning
- CM3 uses a VQGAN to turn images into 1024 tokens 
- trained with a recipe adapted from text-only language models, including a large scale retrieval-augmented pretraining stage and a second multi-task supervised finetuning stage
</p>
<figure class="align-center ">
    <img loading="lazy" src="/imgs/vlms/ra-cm3_architecture.png#center"
         alt="RA-CM3 model architecture" width="100%"/> <figcaption>
            <p>Figure 10. Overview of the RA-CM3 model architecture and training pipeline [12]</p>
        </figcaption>
</figure>

<p align="justify">
</p>
<h3 id="vlms-from-pretrained-backbones">VLMs from Pretrained Backbones</h3>
<p align="justify">
- costly to train from scratch because you need hundreds or thousands of GPUs while having to use millions of image-text pairs 
- to avoid these high costs there is a lot of research in the area of leveraging existing unimodal models 
- just learn to map between the text and image modalities which requires a low amount of compute resources
- in this section we are looking at some of the best open source vision language models out there: the Idefics series, InternVL1.5 and 2, Qwen2-VL
</p>
<h4 id="idefics">Idefics</h4>
<p>Idefics1:</p>
<ul>
<li>introduction of the OBELICS dataset which consists of interleaved image-text documents comprising 141 million web pages extracted from Common Crawl, 353 million associated images and 115 billion text tokens</li>
<li>one of the advantages of OBELICS is the amount and detail of text per image, which is much bigger than in other image-text datasets</li>
<li>Figure X down below shows the whole dataset creation process</li>
</ul>
<figure class="align-center ">
    <img loading="lazy" src="/imgs/vlms/obelics.png#center"
         alt="Generation process of the OBELICS dataset" width="90%"/> <figcaption>
            <p>Figure 9. Overview of the OBELICS generation process [7]</p>
        </figcaption>
</figure>

<ul>
<li>with that dataset the authors created two vision language models called &ldquo;Idefics&rdquo;, a 9 and a 80 billion parameter model</li>
<li>it is based on the Flamingo architecture, comprised of two frozen unimodal backbones, Llama for the language encoder and OpenCLIP for the vision part</li>
<li>learnable cross-attention Transformer blocks and Perceiver blocks are added to connect both unimodal encoders</li>
<li>best results on a combination of the LAION and the OBELICS datasets</li>
</ul>
<p>Idefics2:</p>
<ul>
<li>
<p>investigate which choices matter when building VLMs</p>
</li>
<li>
<p>focus on two design choices</p>
<ul>
<li>model architecture, especially strategy of how to fuse image and text information</li>
<li>training procedure</li>
</ul>
</li>
<li>
<p>main findings:</p>
<ul>
<li>progress in vision-language models is largely driven by the progress of pretrained unimodal backbones (LLM is more important than Vision Encoder, but there are no really good vision encoders out there and I think InternVL will show that this finding is not true)</li>
<li>fully autoregressive architecture outperforms cross-attention, but it requires modifications to the optimization procedure to ensure a stable training</li>
<li>reducing the number of visual tokens with learned pooling significantly improves compute efficiency while also improving performance on downstream tasks (efficiency yes but performance is another thing which is hard to prove without a very good vision encoder)</li>
<li>splitting images into subimages allow trading compute efficiency for more performance during inference, especially noticeable for tasks that require text reading capabilities</li>
</ul>
</li>
<li>
<p>based on the findings described above the authors created Idefics2, a 8B parameter VLM that achieves state-of-the-art performance within its size category</p>
</li>
</ul>
<figure class="align-center ">
    <img loading="lazy" src="/imgs/vlms/idefics2.png#center"
         alt="Idefics2 model architecture" width="90%"/> <figcaption>
            <p>Figure 10. Idefics2 model architecture [8]</p>
        </figcaption>
</figure>

<ul>
<li>vision encoder = SigLIP-SO400M, LLM = Mistral-7B-v0.1</li>
<li>datasets for training: OBELICS, LAION COCO, PMD, OCR-IDL, PDFA</li>
</ul>
<p>Idefics3:</p>
<ul>
<li>test</li>
</ul>
<p align="justify">
</p>
<h4 id="internvl">InternVL</h4>
<p align="justify">
</p>
<h4 id="qwen2-vl">Qwen2-VL</h4>
<p align="justify">
</p>
<h4 id="minicpm-v">MiniCPM-V</h4>
<p>2.5 &amp; 2.6</p>
<p align="justify">
- remaining challenges prevent VLMs from being used in real world applications, the most significant one is the high cost of running those big models 
- most VLMs have to be deployed on high-performance cloud servers, which greatly limits their application scope (mobile, offline, privacy-protective)
- MiniCPM is a model family that tries to change that
- model have strong performance on general benchmarks and especially OCR capabilities, has multilingual support for more than 30 languages and you can run these models on mobile phones
</p>
<figure class="align-center ">
    <img loading="lazy" src="/imgs/vlms/minicpm.png#center"
         alt="MiniCPM-V-2.5 model architecture" width="100%"/> <figcaption>
            <p>Figure 11. MiniCPM-V-2.5 model architecture []</p>
        </figcaption>
</figure>

<p align="justify">
- three key modules: visual encoder, compression layer, LLM 
- input image is encoded by a SigLIP SoViT-400m/14, utilizing the adaptive visual encoding approach proposed by LLaVA-UHD
- the compression layer has a perceiver resampler structure with one layer cross-attention
- the compressed visual tokens along with the text input are fed into the LLM for conditional text generation
- image partitioning -> slice encoding (and resizing so that the slice size matches the ViT input size) -> token compression (1024 tokens per image slice, compressed with cross attention layer to 64/96 tokens)
- 3 phase training process: pretraining, supervised fine-tuning, RLAIF-V
- RLAIF-V is a framework for improving trustworthiness and reduce hallucinations 
</p>
<h2 id="training">Training</h2>
<p align="justify">
- scale is very important to model performance but a lot of companies and academic labs don't have the resources to aquire the amount of compute needed to train such models
- recently researchers found that a data curation pipeline makes it possible to beat the scaling law
</p>
<figure class="align-center ">
    <img loading="lazy" src="/imgs/vlms/training.png#center"
         alt="Important training decisions to make" width="100%"/> <figcaption>
            <p>Figure X. Important decisions to make when training VLMs [2]</p>
        </figcaption>
</figure>

<p align="justify">
- in the following we will explore the importance of data and recipes that are used to create high quality datasets for VLM training
- in addition we will go into grounding, alignment with human preferences and some recipes about choosing the right model for your use case
</p>
<h3 id="data">Data</h3>
<p align="justify">
The quality and organization of data play a critical role in the successful training of Vision-Language Models (VLMs). Due to the complex nature of these models, which need to understand both visual and textual inputs, effective data management through pruning, augmentation, and quality control is essential to achieving optimal performance. Data pruning is a crucial step in refining the datasets used to train VLMs. Pruning techniques fall into three main categories:
</p>
<ul>
<li><b>Heuristic-based pruning</b> involves the use of rules to eliminate low-quality image-text pairs. This can be done through unimodal filtering, where low-quality captions (e.g., lacking complexity or containing non-English text) or inappropriate images (based on size or aspect ratio) are removed. Multimodal filtering further refines data by using image classifiers to detect when objects in the image do not align with the associated text, or by filtering out examples where the majority of text in the caption appears directly within the image itself.</li>
<li><b>Bootstrapping methods</b> leverage pre-trained VLMs to rank image-text pairs based on their multimodal alignment, using metrics such as CLIPScore. This approach helps prioritize data that better represents meaningful relationships between the visual and textual components, further refining the dataset for training.</li>
<li><b>Diversity and balance techniques</b> aim to create datasets that not only contain high-quality pairs but also represent a wide variety of content. Ensuring diversity in objects, actions, and attributes across different modalities can prevent bias and improve the modelâ€™s generalization capability.</li>
</ul>
<p align="justify">
In addition to pruning, the generation of synthetic data has become an effective strategy for enhancing VLM performance. For example, LLMs can generate captions, which can then be used by text-to-image models to create corresponding images. This helps to supplement the training data, especially in areas where real-world examples may be limited or lacking. Data augmentation techniques, such as adding variations to existing image-text pairs (e.g., rotating or cropping images, rewording captions), further contribute to improving model robustness by exposing the VLM to a wider range of inputs.
</p>
<p align="justify">
Data quality is paramount when training VLMs or any other AI model, but assessing the quality of multimodal and interleaved data remains a challenge. The lack of a standardized method for evaluating such data complicates the task, as quality often depends on the subjective judgment of what constitutes a "good" image-text pair. This is an active area of research, as models continue to evolve and demand increasingly refined datasets for training. Despite the challenges, curated datasets such as OBELICS, which contain interleaved data from multiple modalities, have shown promising results. These datasets are carefully constructed to ensure a rich variety of content, making them valuable resources for VLM training.
</p>
<p align="justify">
In summary, data plays a foundational role in training vision-language models, and techniques such as data pruning, augmentation, and synthetic data generation are essential for improving VLM performance. However, assessing data quality remains an open challenge that continues to evolve alongside advancements in multimodal learning.
</p>
<h3 id="model-choice">Model Choice</h3>
<ul>
<li>I don&rsquo;t think this section makes that much sense, there is not really information out there</li>
</ul>
<p align="justify">
As we have learned before, there are a number of different methods to train VLMs, but how do you choose the right one for your specific use case? Is it necessary to train a model from scratch or is it better or sufficient to just learn the mapping between images and text?
</p>
<h3 id="grounding">Grounding</h3>
<p align="justify">
<ul>
<li>
<p>challenge: aims to solve the problem of models not understanding the text prompt which could either lead to ignoring some part of the prompt or hallucinating something that is not even part of the prompt</p>
</li>
<li>
<p>more concrete challenges are e.g. understanding relations such as an object being on the left or right, negations, counting or understanding attributes like colors or textures</p>
</li>
<li>
<p>for now there is no single method to solve this problem and it is an active area of research but there exist some tricks that are sometimes used to improve grounding performance</p>
</li>
<li>
<p><b>Bounding box annotations</b>: incorporate box regression and IoU loss to locate and align visual concepts with their corresponding textual descriptions; you can use existing datasets like COCO for this or you can leverage existing detection models to assign them to e.g. caption nouns</p>
</li>
<li>
<p><b>Negative captioning</b>: Negative samples within the realm of contrastive objectives have been extensively used to mitigate collapse, enhance generalization and discriminative feature learning. Similar techniques are also useful to mitigate problems of VLMs and the results on the <a href="https://github.com/mertyg/vision-language-models-are-bows">ARO benchmark</a> show this</p>
</li>
</ul>
</p>
<h3 id="alignment">Alignment</h3>
<p align="justify">
</p>
<h2 id="evaluation">Evaluation</h2>
<p align="justify">
</p>
<h3 id="benchmarks">Benchmarks</h3>
<p align="justify">
</p>
<h3 id="huggingface-vlm-leaderboard">HuggingFace VLM Leaderboard</h3>
<ul>
<li>let&rsquo;s take a look at the current Huggingface VLM Leaderboard</li>
</ul>
<p align="justify">
</p>
<h2 id="references">References</h2>
<p><a name="references"></a></p>
<p><a href="https://huggingface.co/blog/vlms">[1]</a> M. Noyan &amp; E. Beeching &ldquo;Vision Language Models Explained&rdquo; (2024).</p>
<p><a href="https://arxiv.org/pdf/2405.17247">[2]</a> Bordes et al. &ldquo;An Introduction to Vision-Language Modeling&rdquo; (2024)</p>
<p><a href="https://arxiv.org/pdf/2103.00020">[3]</a> Radford et al. &ldquo;Learning Transferable Visual Models from Natural Language Supervision&rdquo; (2021)</p>
<p><a href="https://arxiv.org/pdf/2405.00740">[4]</a> Lavoie et al. &ldquo;Modeling Caption Diversity in Contrastive Vision-Language Pretraining&rdquo; (2024)</p>
<p><a href="https://arxiv.org/pdf/2112.04482">[5]</a> Singh et al. &ldquo;FLAVA: A Foundational Language And Vision Alignment Model&rdquo; (2021)</p>
<p><a href="https://arxiv.org/pdf/2208.02131">[6]</a> Kwon et al. &ldquo;Masked Vision and Language Modeling for Multi-Modal Represenation Learning&rdquo; (2023)</p>
<p><a href="https://arxiv.org/pdf/2306.16527">[7]</a> Laurencon et al. &ldquo;OBELICS: An Open Web-Scaled Filtered Dataset of Interleaved Image-Text Documents&rdquo; (2023)</p>
<p><a href="https://arxiv.org/pdf/2405.02246">[8]</a> Laurencon et al. &ldquo;What matters when building vision-language models?&rdquo; (2024)</p>
<p><a href="https://arxiv.org/pdf/2408.12637">[9]</a> Laurencon et al. &ldquo;Building and better understanding vision-language models: insights and future directions&rdquo; (2024)</p>
<p><a href="https://arxiv.org/pdf/2205.01917">[10]</a> Yu et al. &ldquo;CoCa: Contrastive Captioners are Image-Text Foundation Models&rdquo; (2022)</p>
<p><a href="https://arxiv.org/pdf/2309.02591">[11]</a> Yu et al. &ldquo;Scaling Autoregressive Multi-Modal Models: Pre-Training and Instruction Tuning&rdquo; (2023)</p>
<p><a href="https://arxiv.org/pdf/2211.12561">[12]</a> Yasunaga et al. &ldquo;Retrieval-Augmented Multimodal Language Modeling&rdquo; (2023)</p>
<p><a href="https://arxiv.org/pdf/2201.07520">[13]</a> Aghajanyan et al. &ldquo;CM3: A Causal Masked Multimodal Model of The Internet&rdquo; (2022)</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Retrieval-Augmented Text Generation (RAG)</title>
      <link>http://localhost:1313/posts/2024-04-23-retrieval-augmented-text-generation/</link>
      <pubDate>Tue, 23 Apr 2024 10:00:00 +0200</pubDate>
      
      <guid>http://localhost:1313/posts/2024-04-23-retrieval-augmented-text-generation/</guid>
      <description>A short intro to Retrieval-Augmented Text Generation, what is it, why is it useful and how does it work.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p align="justify">
In 2020, Lewis et al. introduced a novel approach to enhance language model outputs through the use of Retrieval-Augmented Generation (RAG). Since its inception, RAG has evolved significantly, providing a robust solution to some of the persistent challenges faced by Large Language Models (LLMs).
</p>
<p align="justify">
LLMs, while transformative, are not without their issues. They often produce "hallucinations" or convincing yet inaccurate answers, due to their sole reliance on the fixed dataset on which they were trained on. This limitation is compounded by their inability to incorporate information that emerges after their last training update, rendering them outdated as the world evolves. Additionally, their performance can be suboptimal in specialized areas because their training prioritizes breadth over depth to ensure broad accessibility and applicability.
</p>
<p align="justify">
RAG addresses these challenges by dynamically supplementing model responses with external data fetched in real time in response to queries. This approach not only keeps the information current but also enhances the accuracy and relevancy of the responses.
</p>
<p align="justify">
For a RAG system to deliver high-quality outputs, two core components are crucial. First, it must effectively retrieve the most relevant information from external sources. This involves a sophisticated understanding of the query context and the ability to sift through vast amounts of data quickly and efficiently. Second, it needs to generate accurate responses that integrate the retrieved information, ensuring that the final output is both coherent and contextually appropriate.
</p>
<p align="justify">
Building on these technologies, startups <a href="https://www.trychroma.com/">like Chroma</a>, <a href="https://weaviate.io/">Weaviate</a>, and <a href="https://www.pinecone.io/">Pinecone</a> have expanded upon RAG's foundational concepts by incorporating robust text storage solutions and advanced tooling into their platforms. These enhancements facilitate more efficient data handling and retrieval processes, which are critical for delivering precise and contextually relevant responses.
</p>
<p align="justify">
In the upcoming sections, we will dig deeper into the world of RAG by providing a comprehensive overview of the framework and highlighting the key components essential for an effective RAG system. Additionally, we will explore practical strategies that can enhance the quality and performance of your RAG system. While RAG offers significant benefits, it is not without its challenges. Therefore, we will also examine some of the common obstacles encountered in building RAG systems and discuss the current limitations that engineers need to be aware of as they build these kind of systems.
</p>
<h2 id="rag-framework">RAG Framework</h2>
<p align="justify">
The basic workflow of a RAG system consists of three fundamental steps: indexing, retrieval, and generation. This sequence begins with indexing, where data is organized to facilitate quick and efficient access. The retrieval step can be further divided into three subparts: pre-retrieval, retrieval, and post-retrieval. Pre-retrieval involves preparing and setting up the necessary parameters for the search. Retrieval is the actual process of fetching the most relevant information based on the query. Post-retrieval includes the refinement and selection of the fetched data to ensure its relevance and accuracy. Finally, in the generation phase, the system synthesizes this information into coherent and contextually appropriate responses. These foundational steps remain at the core of every advanced RAG workflow, serving as the building blocks for more complex systems.
</p>
<figure class="align-center ">
    <img loading="lazy" src="/imgs/rag/rag_framework.png#center"
         alt="Abstract Concept Graphic Retrieval-Augmented Generation Elements" width="100%"/> <figcaption>
            <p>Figure 1. RAG Framework Paradigm [1]</p>
        </figcaption>
</figure>

<p align="justify">
RAG presents a cost-effective alternative to the traditional, resource-intensive training and fine-tuning processes required for LLMs. Unlike standard LLMs that need model updates to incorporate new information, RAG dynamically integrates fresh data by retrieving relevant external content and concatenating it to the search query. This ensures flexibility and scalability to make it particularly valuable across a variety of use cases, like self-service applications where solutions get retrieved from an internal knowledge base and integrated into a helpful answer. Down below you can see the basic workflow that most RAG systems follow. 
</p>
<figure class="align-center ">
    <img loading="lazy" src="/imgs/rag/rag_workflow.png#center"
         alt="Basic Retrieval-Augmented Generation Workflow" width="100%"/> <figcaption>
            <p>Figure 2. Basic RAG Workflow []</p>
        </figcaption>
</figure>

<p align="justify"> 
You start by generating document vectors using an embedding model for every document or text you want to include in your knowledge database. Embedding models (e.g. BERT, OpenAI text-embedding-ada-002) turn text into a vector representation, which is essential for the retrieval process by enabling similarity search. The documents you would want to retrieve can range from specific company guidelines or documents, a website to solution descriptions to known problems. Popular choices for such vector stores are <a href="https://github.com/facebookresearch/faiss">FAISS</a>, <a href="https://www.trychroma.com/">Chroma</a> or <a href="https://lancedb.com/">Lance</a>.  
</p>
<p align="justify"> 
After you have generated the vector store you are good to go. First your query gets embedded into a vector, like we have described above, which is then used in a similarity search over your vector store to determine the most relevant documents. These documents get retrieved and concatenated to your query before its fed into the LLM. The LLM then produces based on the query and context an answer. This describes the very basic and naive workflow. In practice there are a lot of other things involved, like prompt engineering, a limited context window, limited input tokens of the embedding model, preprocessing of the query and documents, postprocessing of the answer etc. We will touch most of these things in more detail in the next sections. 
</p>
<h3 id="pre-retrieval">Pre-Retrieval</h3>
<p>The pre-retrieval phase is all about the data or the knowledge base. The goal is to ensure efficient and correct information retrieval.</p>
<h4 id="data-preparation--modification">Data Preparation &amp; Modification</h4>
<p align="justify">
If you have worked on an applied ML project with real customers than you are aware of the quality of company data. It would be pretty naive to assume all the information you want to have in your knowledge base is in an easy to read and parse format. Let's be real, most of the company knowledge is in Excel sheets and PowerPoint presentations or in pdf scans that have no pretty text layers. Most of the current RAG pipelines just work on text data, so you have to think about ways to transform everything into text. In the long run, I think you will have multimodal pipelines that can also work with images for example so you can embed e.g. a presentation as a sequence of images. Most of the data preparation phase is about OCR (which still is far from being solved), data cleaning and being creative about how to incorporate all the knowledge you have. You can use frameworks like <a href="https://github.com/Unstructured-IO/unstructured">unstructured</a> for parsing your data. This is really helpful for quickly getting a prototype up and running. But if you have ever seen business Excel sheets you might know why I think that those tools are definitely not good enough and we will need something that works on images.
</p>
<p align="justify">
Data Modification is another important component of the pre-retrieval phase for enhancing retrieval efficiency. It includes e.g. removing irrelevant or redundant information from your text to improve the quality of retrieval results or enriching the data with additional information such as metadata to boost relevance and diversity of the retrieved content. You could e.g. use visual models to describe images and diagrams in text form or use a LLM to extract metadata from documents.
</p>
<h4 id="indexing">Indexing</h4>
<p align="justify">
After our data is clean and pretty we follow up with indexing which is dependent on the task and data type. In the classical workflow, documents/texts are split into chunks and then each chunk is embedded and indexed. The embeddings are created through the use of an embedding model like the one from <a href="https://docs.mistral.ai/capabilities/embeddings/">Mistral</a>. Such an embedding model turns your text into a feature vector that captures the semantic meaning of chunks. Unfortunately most of these embedding models are closed sourced but feel free to build your own.</p>
<figure class="align-center ">
    <img loading="lazy" src="/imgs/rag/indexing.png#center"
         alt="Basic Chunking/Indexing Workflow" width="80%"/> <figcaption>
            <p>Figure 3. Basic Chunking/Indexing Workflow</p>
        </figcaption>
</figure>

<p align="justify">
As you might already know, LLMs have limited capacity to process text or more specifically tokens, which is often described as context length. E.g. GPT3.5 has a context length of 4,096 tokens which it can process at once. This roughly about 6 pages of english text after tokenization. By chunking our documents we first of all have to make sure, that the chunk size is smaller than the maximum context length of our LLM of choice. Nowadays there exist models like Llama3.1 that have extensive context lengths like 128K tokens. Some people might argue that RAG will become irrelevant in the long term because we can shove our whole knowledge base in-context but that's for the future. In most cases we just need small passages of text from a document and we want to combine it with information from other documents as well to answer our question. Determining the chunk size is a critical decision that not only influences the accuracy but also the efficiency (response generation time) of the retrieval and the overall RAG system. The goal is to choose the correct chunks of optimal lengths so that you can give the LLM as much relevant information as possible.</p>
<p align="justify">
There are a bunch of different possibilities of how to chunk you documents, e.g. page-level, sentence-level or you try to split by sections. You can imagine, based on the use case and data type, different strategies could be helpful here. There is no one size fits all approach and most of the time you have to do a bit of experimenting. E.g. Sentence-level indexing is beneficial for question-answering systems to precisely locate answers, while document-level indexing is more appropriate for summarizing documents to understand their main concepts and ideas. In some cases the retrieved data doesn't even have to be the same we used while indexing. For example you could use a LLM to generate questions that every chunk answers and then you retrieve based on similarity of questions. Or you could generate summaries for every chunk and index those which can reduce redundant information and irrelevant details (Figure 4).</p>
<figure class="align-center ">
    <img loading="lazy" src="/imgs/rag/advanced_indexing.png#center"
         alt="Advanced Chunking/Indexing Workflow" width="90%"/> <figcaption>
            <p>Figure 4. Advanced Chunking/Indexing Workflow</p>
        </figcaption>
</figure>

<p align="justify">
Both strategies shown above are just two examples of how to improve the chunk indexing and you can be creative here, based on you use case. Another interesting way of indexing is described in MemWalker paper <a href="#references">[6]</a>, where the documents are split into segments which are recursively summarized and combined to form a memory tree. To generate answers the tree is navigated down to the most important segments. The method outperforms various long context LLMs.
</p>
<h4 id="query-manipulation">Query Manipulation</h4>
<p align="justify">
After the indexing is done the last possibility to improve you retrieval pipeline is through query manipulation to adjust the user queries for a better match with the indexed data. Examples of this include:
</p>
<ul>
<li><b>Query Reformulation/Refinement</b>: Rewrite the query to align more closely with the user's 'real' intention (this is hard to do) or create multiple queries with the same intention.</li>
<li><b>Query Expansion</b>: Extend the query to capture more relevant results through e.g. including synonyms or related terms or identifying people/places/companies and add information regarding those.</li>
<li><b>Query Normalization</b>: Resolve differences in spelling or terminology for more consistent query matching.</li>
</ul>
<p align="justify">
This is another part of the pipeline where you can be creative and experiment with different approaches, combine them or modify them for your specific use case. Here is a short list of papers that implemented those strategies or combinations of them: Rewrite-Retrieve-Read <a href="#references">[11]</a>, FiD (Fusion-in-Decoder) <a href="#references">[7]</a>, CoK (Chain-of-Knowledge) <a href="#references">[8]</a>, Query2Doc <a href="#references">[10]</a>, Step-Back <a href="#references">[9]</a> or FLARE (Forward-Looking Active Retrieval) <a href="#references">[12]</a>.
</p>
<h3 id="retrieval">Retrieval</h3>
<p align="justify">
The retrieval process is a combination of search and ranking algorithms. The overall goal is to select and prioritize documents from a knowledge base to enhance the quality of the generation model outputs. The first thing you have to think about here is the type of search strategy you want to use. There are three main choices you can select from, vector search, keyword search or a hybrid approach. 
<p align="justify">
Since you have embedded all your knowledge into feature vectors it's kinda easy to just use cosine similarity and k-Nearest-Neighbors to identify the 'k' vectors that are most similar to the query. kNN is a very popular choice due to its simplicity and explainability. One shortcoming of this strategy is the computational intensity of this approach when you have a very large knowledge base. Instead of cosine similarity you can also use euclidean distance or the dot prodoct which can lead to better search results in some cases.
</p>
<p align="justify">
There is a lot of research going on here and the following is a list of a couple of interesting methods:
</p>
<ul>
<li><b>Atlas</b> <a href="#references">[24]</a>: Attention Distillation and Perplexity Distillation to steer the retriever to more relevant documents.</li>
<li><b>IRCOT</b> <a href="#references">[25]</a>: Improve retrieval effectiveness by integrating reasoning.</li>
<li><b>SURGE</b> <a href="#references">[26]</a>: Subgraph retriever to extract relevant subgraphs from a knowledge graph.</li>
<li><b>PRCA</b> <a href="#references">[27]</a>: Employ domain specific abstract summarization to extract relevant and context-rich information using a supervised learning strategy.</li>
</ul>
<h3 id="post-retrieval">Post-Retrieval</h3>
<p align="justify">
This phase serves to refine the initially retrieved documents to improve the quality of text generation. This phase consists of re-ranking and filtering, each aimed at optimizing the document selection for the final generation task.
</p>
<h4 id="re-ranking">Re-Ranking</h4>
<p align="justify">
In the re-ranking step, the documents previously retrieved are reassessed, scored, and reorganized. The objective is to more accurately highlight the documents most relevant to the query and diminish the importance of the less relevant ones. There are a bunch of different methods out there for re-ranking:
</p>
<ul>
<li><b>Re2G</b> <a href="#references">[28]</a>: Sequence pair classification for re-ranking, using BERT to analyze both query and passage.</li>
<li><b>PROMPTAGATOR</b> <a href="#references">[29]</a>: Employs a cross-attention model for re-scoring. It progressively improves content quality by a strategy called "Lift Yourself Up" that iteratively selects the best candidate from a pool for further generation rounds.</li>
<li><b>In-Context RALM</b> <a href="#references">[30]</a>: Explores two re-ranking approaches, zero-shot re-ranking using LLMs and predictive re-ranking using trained models. The goal is to refine the selection of documents based on their expected utility for improving language model performance.</li>
<li><b>ITER-RETGEN</b> <a href="#references">[31]</a>: Leverages knowledge distillation from the re-ranker to the dense retriever, finetuning retrieval efforts based on relevance signals from LLM outputs.</li>
<li><b>DKS-RAC</b> <a href="#references">[32]</a>: Presents Dense Knowledge Similarity (DKS) for aligning the knowledge between answers and retrieved passages at the sequence level.</li>
</ul>
<h4 id="filtering">Filtering</h4>
<p align="justify">
Filtering aims to remove documents that fail to meet specified quality or relevance standards. This can be done through several approaches, such as establishing a minimum relevance score threshold to exclude documents below a certain relevance level. Furthermore, the use of feedback from users or prior relevance evaluations assists in adjusting the filtering process, guaranteeing that only the most relevant documents are retained for text generation. The following three methods try to improve the filtering process:
</p>
<ul>
<li><b>COK</b> <a href="#references">[33]</a>: Progressive Rationale Correction technique aimed at iteratively refining rationales with retrieved knowledge. It is a continuous optimization process to enhance the relevance and quality of information used in content generation.</li>
<li><b>FiD-TF</b> <a href="#references">[34]</a>: Focus on removal of irrelevant and redundant tokens by employing a dynamic mechanism to identify those tokens.</li>
<li><b>RECOMP</b> <a href="#references">[35]</a>: Focus on removal of irrelevant and redundant tokens by compressing documents into concise summaries focusing only on selecting the most pertinent content for the generation process.</li>
</ul>
<h3 id="generation">Generation</h3>
<p align="justify">
In the generation phase the overall goal is to generate text that is relevant to the query and reflective of the information found in the retrieved documents. The process is quite simple, we just concat the query with the found information and input that into a LLM. The main challenge is about ensuring the outputs alignment and accuracy with the retrieved contents which isn't straightforward. The generated output should accurately convey the information from the retrieved documents and align with the query's intent, while also offering the flexibility to introduce new insights or perspectives not explicitly contained within the retrieved data.
</p>
<p align="justify">
There exist a lot of different approaches to improve the generation quality in a RAG pipline. The following list contains some recent papers which aimed at doing exactly that:
</p>
<ul>
<li><b>REPLUG</b> <a href="#references">[36]</a>: Prepend retrieved documents to the input context before the final prediction. This introduces an ensemble strategy to encode retrieved documents in parallel, overcoming the limitations of LM context length and enhancing accurarcy through the allocation of increased computational resources.</li>
<li><b>RECITE</b> <a href="#references">[37]</a>: Implements a self-consistency technique which involves generating multiple recitations independently and employing a majority vote system to determine the most appropriate answer.</li>
<li><b>PKG</b> <a href="#references">[38]</a>: Customize outputs by generating background knowledge internally using a pre-trained model. This method directly integrates domain or task-specific knowledge into the generation step which enhances the LMs capacity to produce responses that are specifically tailored to the given context.</li>
<li><b>SURGE</b> <a href="#references">[39]</a>: Customization through application of graph-text contrastive learning to ensure that the generated dialogue responses are in tight alignment with the knowledge contained in the retrieved subgraph.</li>
</ul>
<h2 id="advanced-rag-pipelines">Advanced RAG Pipelines</h2>
<p align="justify">
The naive RAG implementation described before is rarely enough to satisfy production grade requirements. This has multiple reasons:
</p>  
<ul>
<li><b>Question ambiguity</b>: user questions are not well defined and may lead to irrelevant retrieval results </li>
<li><b>Low retrieval accuracy</b>: retrieved documents may not be equally relevant to the question </li>
<li><b>Limited knowledge</b>: the knowledge base may not include the information the user is looking for </li>
<li><b>Context window performance limitations</b>: trying to "over-retrieve" may hit on the capacity of the context window or otherwise produce a context window that is too big to return a result in a reasonable amount of time </li>
</ul>
<p align="justify">
Many new RAG patterns have emerged to address these limitations. In the following I will go over some of those techniques, but it is important to note that there is no silver bullet. Each one of these methods may still produce poor results in certain situations or isn't well fitted for your specific use case. 
</p>
<h3 id="self-rag">Self RAG</h3>
<p align="justify">
The Self-Reflective RAG paper describes fine-tuned models that incorporate mechanisms for adaptive information retrieval and self critique. These models can dynamically determine when external information is needed, and can critically evaluate its generated responses for relevance and factual accuracy. Figure X down below shows the retrieval process using these new tokens.
</p>
<figure class="align-center ">
    <img loading="lazy" src="/imgs/rag/self_rag.png#center"
         alt="Flowchart of the Self RAG method" width="100%"/> <figcaption>
            <p>Figure 5. Self RAG Process [3]</p>
        </figcaption>
</figure>

<p align="justify">
First the Language Model decides about the necessity of additional information to answer the prompt. In the second step multiple segments are generated concurrently and each of them is rated in terms of relevance to the prompt and usefulness of the retrieved information. Thereafter each segments is critiqued and the best one is chosen. Then the cycle can repeat, if the model decides to retrieve more information. The table down below shows the four new tokens that make this whole process work.
</p>
<table>
    <tr>
        <th>Name</th>
        <th>Description</th>
        <th>Output</th>
</tr>
    <tr>
        <td>Retrieval Token</td>
        <td>Retrieve additional information from knowledge base</td>
        <td>yes, no</td>
    </tr>
    <tr>
        <td>Relevance Token</td>
        <td>Retrieved information is relevant to the prompt</td>
        <td>relevant, irrelevant</td>
    </tr>
    <tr>
        <td>Support Token</td>
        <td>Generated information is supported by the provided context</td>
        <td>fully supported, partially supported, no support</td>
    </tr>
    <tr>
        <td>Critique Token</td>
        <td>Useful response to the prompt</td>
        <td>5, 4, 3, 2, 1</td>
    </tr>
</table> 
<p align="justify">
For more detailed information regarding training, how they inserted these special tokens and data collection I'll recommend checking out the <a href="https://arxiv.org/pdf/2310.11511">paper</a>.
</p>
<h3 id="corrective-rag">Corrective RAG</h3>
<p align="justify">
The Corrective Retrieval Augmented Generation method to improve the accuracy and robustness of LM by re-incorporating information from retrieved documents. This is accomplished by the introduction of three additional components. First a lightweight evaluator model that assesses the quality of retrieved documents and determines which to use, ignore or request more documents based on a score. The second new component is an incorporated web search to extend the information base and get more up-to-date information. The last new addition is a decompose-then-recompose algorithm for selectively focusing on key information and filtering out irrelevant information that also makes use of the evaluator model. The Figure X down below gives a nice overview of the CRAG method at inference.
</p>
<figure class="align-center ">
    <img loading="lazy" src="/imgs/rag/crag.png#center"
         alt="An overview of Corrective Retrieval Augmented Generation" width="100%"/> <figcaption>
            <p>Figure 6. An overview of CRAG at inference [4]</p>
        </figcaption>
</figure>

<p align="justify">
The Knowledge Refinement process is quite straightforward and starts by segmenting each retrieved document into fine-grained knowledge strips through heuristic rules. Then the retrieval evaluator is used to calculate a relevance score of each knowledge strip. Based on these scores the strips are filtered and recomposed via concatenation in order.
</p>
<h3 id="rag-fusion">RAG Fusion</h3>
<p align="justify">
The origin of RAG-Fusion is a <a href="https://github.com/Raudaschl/RAG-Fusion">github project</a> which got noticed from an Infineon employee who deployed it internally. The motivation behind it was, the need for employees to rapidly obtain product information but regular RAG didn't work that well. RAG-Fusion is a combination of traditional RAG and reciprocal rank fusion (RRF) and the workflow is as followed:
</p>
<ol>
<li>Receive query and generate a number of new search queries through a LLM</li>
<li>Vector Search like in regular RAG pipeline</li>
<li>Reciprocal Rank Fusion: assign scores to every document and re-rank them accordingly</li>
<li>Send all the re-ranked queries and documents to the LLM to generate an answer</li>
</ol>
<p align="justify">
The figure down below shows this process described above.
</p>
<figure class="align-center ">
    <img loading="lazy" src="/imgs/rag/rag_fusion.png#center"
         alt="RAG Fusion" width="80%"/> <figcaption>
            <p>Figure 7. RAG Fusion Workflow [24]</p>
        </figcaption>
</figure>

<p align="justify">
The Infineon customers and engineers found the biggest downside of the method was the slow answer time because of the generation of multiple similar queries. Moreover the response times fluctuated over time (from 10 - 32s) because of the use of an third party API. Another main critique was the inability the empirically evaluate the answers. But in general, the RAG-Fusion answers were more accurate and comprehensive than those of the vanilla RAG system.
</p>
<h3 id="self-reasoning">Self-Reasoning</h3>
<p align="justify">
The method described in this paper focuses on the problem of irrelevant document retrieval which may result in unhelpful response generation or even performance deterioration. It is similar to the Self-RAG without the need of extra models and datasets. The authors propose an end-to-end self-reasoning framework to improve on these problems and especially improve reliability and traceability. 
</p>
<figure class="align-center ">
    <img loading="lazy" src="/imgs/rag/self-reasoning.png#center"
         alt="Self-Reasoning Framework to Improve RAG" width="100%"/> <figcaption>
            <p>Figure 8. Self-Reasoning Framework to Improve RAG [5]</p>
        </figcaption>
</figure>

<p align="justify">
As shown above the framework consists of three processes, the Relevance-Aware Process, the Evidence-Aware Selective Process and the Trajectory Analysis Process.
</p>
<p align="justify">
<b>Relevance-Aware Process</b>: Instruct the model to judge the relevance between the retrieved documents $\mathcal{D}$ and the given question $\mathcal{q}$. In addition the model is requested to generate reasons explaining the relevance of each document. The self-reasoning trajectories are defined as $\mathcal{\tau_{r}}$. If none of the documents is classified as relevant, the answer should be generated by the basic LLM. 
</p>
<p align="justify">
<b>Evidence-Aware Selective Process</b>: Instruct the model to choose relevant documents and select snippets of key sentences for the selected documents. Then the model has to generate the reason why the selected snippets can answer the question, so that you end up with a list containing the cited content and the reason for the cite. The self-reasoning trajectories generated in this process are defined as $\mathcal{\tau_{e}}$.</p>
<p align="justify">
<b>Trajectory Analysis Process</b>: Here the self-reasoning trajectories ($\mathcal{\tau_{r}}$ & $\mathcal{\tau_{e}}$) are consolidated to form a chain of reasoning snippets. With these snippets as context the LLM is instructed to output content with two fields: analysis (long-form answer) and answer (short-form). 
</p>
<p align="justify">
Regarding the training process the authors propose a stage-wise training because of problems with the generation of long reasoning trajectories. In the first stage only the first two stage trajectories are masked, in the second stage only the trajectories from the third process are masked. Finally all trajectories are concatenated and trained end-to-end. For more details on this procedure, check out the paper.</p>
<h2 id="evaluation">Evaluation</h2>
<p align="justify">
Now you have built you fancy RAG engine, but how do you determine if this thing is any good? Is it even better as a vanilla LLM or is it even worse? Since RAG systems are comprised of multiple components and can get kinda complicated as we have seen above, you can evaluate single components individually or just the performance of the whole thing on the downstream task. Because of the AI hype and the push of LLMs into prodcution systems, this has become an important area of research. 
</p>
<p>Datasets for measuring performance on downstream tasks like you would assess a regular LLM using established metrics like F1 or Exact Match (EM):</p>
<ul>
<li>TriviaQA <a href="#references">[17]</a></li>
<li>HotpotQA <a href="#references">[18]</a></li>
<li>FEVER <a href="#references">[19]</a></li>
<li>Natural Questions <a href="#references">[20]</a></li>    
<li>Wizard of Wikipedia <a href="#references">[21]</a></li>
<li>T-REX <a href="#references">[22]</a></li>
</ul>
<p align="justify">
For the further development of the methods we need a more finegrained evaluation for identifying the components of the pipeline that are the weak points and we need to be able to analyze those weaknesses in more detail. Various frameworks were introduced in the recent past to evaluate RAG pipelines across multiple dimensions, including the relevance of the retrieved documents, the quality of the generated text and the resilience to misinformation. The following table from <a href="#references">[1]</a> shows more details about the different frameworks, their methods and metrics as well as the datasets they use. 
</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Framework</th>
          <th style="text-align: left">Aspects</th>
          <th style="text-align: left">Methods</th>
          <th style="text-align: left">Metrics</th>
          <th style="text-align: left">Datasets</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">RAGAS <a href="#references">[13]</a></td>
          <td style="text-align: left">Quality of RAG Systems</td>
          <td style="text-align: left">Context Relevance, Answer Relevance, Faithfulness</td>
          <td style="text-align: left">Extracted Sentences / Total Sentences, Average Cosine Similarity, Supported Statements / Total Statements</td>
          <td style="text-align: left">WikiEval</td>
      </tr>
      <tr>
          <td style="text-align: left">ARES <a href="#references">[14]</a></td>
          <td style="text-align: left">Improving RAGAS</td>
          <td style="text-align: left">Context Relevance, Answer Relevance, Answer Faithfulness</td>
          <td style="text-align: left">Confidence Intervals</td>
          <td style="text-align: left">KILT, SuperGLUE</td>
      </tr>
      <tr>
          <td style="text-align: left">RECALL <a href="#$references">[15]</a></td>
          <td style="text-align: left">Counterfactual Robustness</td>
          <td style="text-align: left">Response Quality, Robustness</td>
          <td style="text-align: left">Accuracy (QA), BLEU, ROGUE-L</td>
          <td style="text-align: left">EventKG, UJ</td>
      </tr>
      <tr>
          <td style="text-align: left">RGB <a href="#references">[16]</a></td>
          <td style="text-align: left">Impact of RAG on LLMs</td>
          <td style="text-align: left">Noise Robustness, Negative Rejection, Information Integration, Counterfactual Robustness</td>
          <td style="text-align: left">Accuracy, Rejection Rate, Error Detection Rate, Error Correction Rate</td>
          <td style="text-align: left">Synthetic Dataset including English and Chinese</td>
      </tr>
  </tbody>
</table>
<p align="justify">
Let's take a closer look at the evaluation of the two components:
</p>
<p align="justify">
<b>Evaluate Retrieval</b>: The quality of the search results is most of the time evaluated based on standard metrics like Mean Average Precision (MAP), Precision, Reciprocal Rank, Recall and Normalized Discounted Cumulative Gain (NDCG) which primarily assess the relevance of retrieved documents regarding a given query. For some explanations on those take a look <a href="https://www.deepset.ai/blog/rag-evaluation-retrieval">here</a>. The Rejection Rate measures a systems ability to decline answering when no relevant information is found. In addition the Error Detection Rate assesses the models capability to identify and disregard incorrect or misleading information from retrieved documents. Another important metric is the Context Relevance that ensures the perinence of the retrieved documents so that the information used to generate responses is directly related to the querys context. Faithfulness measures the accuracy with which the generated content reflects the information in the retrieved documents.
</p>
<p align="justify">
<b>Evaluate Generation</b>: This part is more common and there are a lot of different standard metrics based on the downstream task. Those metrics assess linguistic quality and coherence (BLEU score, ROUGE-L), accuracy and the extent to which the generated text reflects the ground truth data (EM, F1 score). Beyond the standard metrics, the evaluation can incorporate task-specific criteria and novel metrics tailored to particular applications. In dialog generation perplexity and entropy are used to evaluate response diversity and naturalness. Based on your specific use case, you can get creative here.
</p>
<h2 id="references">References</h2>
<p><a name="references"></a></p>
<p><a href="https://arxiv.org/pdf/2404.10981">[1]</a> Y. Huang &amp; J.X. Huang &ldquo;A Survey on Retrieval-Augmented Text Generation for Large Language Models&rdquo; (2024).</p>
<p><a href="https://www.pinecone.io/learn/advanced-rag-techniques/">[2]</a> Roie Schwaber-Cohen &ldquo;Advanced RAG Techniques&rdquo; (2024).</p>
<p><a href="https://arxiv.org/pdf/2310.11511">[3]</a> Asai et al. &ldquo;Self-RAG: Learning to Retrieve, Generate, and Critique through Self-Reflection&rdquo; (2023)</p>
<p><a href="https://arxiv.org/pdf/2401.15884">[4]</a> Yan et al. &ldquo;Corrective Retrieval Augmented Generation&rdquo; (2024)</p>
<p><a href="https://arxiv.org/pdf/2407.19813">[5]</a> Xia et al. &ldquo;Improving Retrieval Augmented Language Model with Self-Reasoning&rdquo; (2024)</p>
<p><a href="https://arxiv.org/pdf/2310.05029">[6]</a> Chen et al. &ldquo;Walking Down the Memory Maze: Beyond Context Limit Through Interactive Reading&rdquo; (2023)</p>
<p><a href="https://arxiv.org/pdf/2007.01282">[7]</a> G. Izacard &amp; E. Grave &ldquo;Leveraging Passage Retrieval with Generative Models for Open Domain Question Answering&rdquo; (2020)</p>
<p><a href="https://arxiv.org/pdf/2305.13269">[8]</a> Xingxuan et al. &ldquo;Chain-of-Knowledge: Grounding Large Language Models via Dynamic Knowledge Adapting over Heterogeneous Sources&rdquo; (2024)</p>
<p><a href="https://arxiv.org/pdf/2310.06117">[9]</a> Zheng et al. &ldquo;Take a Step Back: Evoking Reasoning via Abstraction in Large Language Models&rdquo; (2023)</p>
<p><a href="https://arxiv.org/pdf/2303.07678">[10]</a> Wang et al. &ldquo;Query2doc: Query Expansion with Large Language Models&rdquo; (2023)</p>
<p><a href="https://arxiv.org/pdf/2305.14283">[11]</a> Ma et al. &ldquo;Query Rewriting for Retrieval-Augmented Large Language Models&rdquo; (2023)</p>
<p><a href="https://arxiv.org/pdf/2305.06983">[12]</a> Jiang et al. &ldquo;Active Retrieval Augmented Generation&rdquo; (2023)</p>
<p><a href="https://arxiv.org/pdf/2309.15217">[13]</a> Shahul et al. &ldquo;RAGAS: Automated Evaluation of Retrieval Augmented Generation&rdquo; (2023)</p>
<p><a href="https://arxiv.org/pdf/2311.09476">[14]</a> Saad-Falcon et al. &ldquo;ARES: An Automated Evaluation Framework for Retrieval Augmented Generation Systems&rdquo; (2023)</p>
<p><a href="https://arxiv.org/pdf/2311.08147">[15]</a> Liu et al. &ldquo;RECALL: A Benchmark for LLMs Robustness against External Counterfactual Knowledge&rdquo; (2023)</p>
<p><a href="https://arxiv.org/pdf/2309.01431">[16]</a> Chen et al. &ldquo;Benchmarking Large Language Models in Retrieval-Augmented Generation&rdquo; (2023)</p>
<p><a href="https://arxiv.org/pdf/1705.03551">[17]</a> Joshi el al. &ldquo;TriviaQA: A Large Scale Distantly Supervised Challenge Dataset for Reading Comprehension&rdquo; (2017)</p>
<p><a href="https://arxiv.org/pdf/1809.09600">[18]</a> Yang et al. &ldquo;HOTPOTQA: A Dataset for Diverse, Explainable Multi-hop Question Answering&rdquo; (2018)</p>
<p><a href="https://arxiv.org/pdf/1803.05355">[19]</a> Thorne et al. &ldquo;FEVER: A large-scale dataset for Fact Extraction and VERification&rdquo; (2018)</p>
<p><a href="https://aclanthology.org/Q19-1026.pdf">[20]</a> Kwiatowski el al. &ldquo;Natural Questions: A Benchmark for Question Answering Research&rdquo; (2019)</p>
<p><a href="https://arxiv.org/pdf/1811.01241">[21]</a> Dinan et al. &ldquo;Wizard of Wikipedia: Knowledge Powered Conversational Agents&rdquo; (2019)</p>
<p><a href="https://aclanthology.org/L18-1544.pdf">[22]</a> ElSahar et al. &ldquo;T-REx: A Large Scale Alignment of Natural Language with Knowledge Base Triples&rdquo; (2018)</p>
<p><a href="https://arxiv.org/pdf/2402.03367">[23]</a> Z. Rackauckas &ldquo;RAG-Fusion: a New Take on Retrieval Augmented Generation&rdquo; (2024)</p>
<p><a href="https://arxiv.org/pdf/2208.03299">[24]</a> Izacard et al. &ldquo;Atlas: Few-shot learning with retrieval augmented language models&rdquo; (2023)</p>
<p><a href="https://arxiv.org/pdf/2212.10509">[25]</a> Trivedi et al. &ldquo;Interleaving Retrieval with Chain-of-Thought Reasoning for Knowledge-Intensive Multi-Step Questions&rdquo; (2023)</p>
<p><a href="https://arxiv.org/pdf/2305.18846">[26]</a> Kang et al. &ldquo;Knowledge Graph Augmented Language Models for Knowledge Grounded Dialog Generation&rdquo; (2023)</p>
<p><a href="https://aclanthology.org/2023.emnlp-main.326.pdf">[27]</a> Yang et al. &ldquo;PRCA: Fitting Black-Box Large Language Models for Retrieval Question Answering via Pluggable Reward-Driven Contextual Adapter&rdquo; (2023)</p>
<p><a href="https://arxiv.org/pdf/2207.06300">[28]</a> Glass et al. &ldquo;Re2G: Retrieve, Rerank, Generate&rdquo; (2022)</p>
<p><a href="https://arxiv.org/pdf/2209.11755">[29]</a> Dai et al. &ldquo;PROMPTAGATOR: Few-shot Dense Retrieval from 8 Examples&rdquo; (2022)</p>
<p><a href="https://arxiv.org/pdf/2302.00083">[30]</a> Ram et al. &ldquo;In-Context Retrieval Augmented Language Models&rdquo; (2023)</p>
<p><a href="https://arxiv.org/pdf/2305.15294">[31]</a> Shao et al. &ldquo;Enhancing Retrieval-Augmented LLMs with Iterative Retrieval-Generation Synergy&rdquo; (2023)</p>
<p><a href="https://aclanthology.org/2023.ijcnlp-main.65.pdf">[32]</a> Huang et al. &ldquo;Retrieval Augmented Generation with Rich Answer Encoding&rdquo; (2023)</p>
<p><a href="https://arxiv.org/pdf/2305.13269">[33]</a> Li et al. &ldquo;Chain-of-Knowledge: Grounding Large Language Models via Dynamic Knowledge Adapting over Heterogeneous Sources&rdquo; (2024)</p>
<p><a href="https://arxiv.org/pdf/2310.13682">[34]</a> Berchansky et al. &ldquo;Optimizing Retrieval-Augmented Reader Models via Token Elimination&rdquo; (2023)</p>
<p><a href="https://arxiv.org/pdf/2310.04408">[35]</a> Xu et al. &ldquo;RECOMP: Improving Retrieval Augmented LMs with Compression and Selective Augmentation&rdquo; (2023)</p>
<p><a href="https://arxiv.org/pdf/2301.12652">[36]</a> Shi et al. &ldquo;REPLUG: Retrieval-Augmented Black-Box Language Models&rdquo; (2023)</p>
<p><a href="https://arxiv.org/pdf/2210.01296">[37]</a> Sun et al. &ldquo;Recitation-Augmented Language Models&rdquo; (2023)</p>
<p><a href="https://arxiv.org/pdf/2305.04757">[38]</a> Luo et al. &ldquo;Augmented Large Language Models with Parametric Knowledge Guiding&rdquo; (2023)</p>
<p><a href="https://arxiv.org/pdf/2305.18846">[39]</a> Kang et al. &ldquo;Knowledge Graph-Augmented Language Models for Knowledge-Grounded Dialog Generation&rdquo; (2023)</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Parameter-Efficient LLM Finetuning</title>
      <link>http://localhost:1313/posts/2023-09-08-parameter-efficient-llm-finetuning/</link>
      <pubDate>Fri, 08 Sep 2023 10:00:00 +0200</pubDate>
      
      <guid>http://localhost:1313/posts/2023-09-08-parameter-efficient-llm-finetuning/</guid>
      <description>Finetuning of Large Language Models in a parameter efficient way.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p align="justify">
I am already quite late to the Large Language Models (LLM) party but better starting late than never. In this post I am going over a couple of popular techniques for fine-tuning these models without the need of training the whole thing which would be quite expensive. But before I dive into the techniques we should talk about what LLMs and fine-tuning are, why we need it and what the current problems are.
</p>
<p align="justify">
LLMs are based on the <a href="http://jalammar.github.io/illustrated-transformer/">Transformer</a> architecture, like the GPTs or BERT, which have achieved state-of-the-art results in various Natural Language Processing (NLP) tasks, like Translation, Question Answering, Summarization etc. The paradigm these days is to train such a model on generic web-scale data (basically the whole internet) and fine-tune it on a downstream task. Fine-tuning in this case just means that you train the model further with a small dataset you collected for a specific task. This fine-tuning results in most cases in huge performance gains when compared to using just the LLM as is (e.g. zero-shot inference).  
</p>
<p align="justify">
However, based on the current model sizes a full fine-tuning becomes infeasible to train on consumer hardware (which makes me a bit sad). In addition when you want to store and deploy multiple fine-tuning model instances for different tasks, this becomes very expensive because they are the same size as the base LLM. Because of these two main problems, people came up with more efficient methods for doing this which are referred to as Parameter-efficient fine-tuning (PEFT) procedures. These approaches basically enable you to get performance comparable to full fine-tuning while only having a small number of trainable parameters.  
</p>
<p align="justify">
PEFT approaches only fine-tune a small number of (extra) model parameters while freezing most parameters of the pretrained LLMs, thereby greatly decreasing the computational and storage costs. They have also been shown to be better than fine-tuning in cases when you don't have that much task data and in out-of-domain scenarios. By saving just the extra model parameters you also solve the portability and cost problem because the PEFT checkpoints are much smaller, just a few MB, in contrast to the LLM checkpoints that need multiple GB. The small trained weights from PEFT approaches are added on top of the pretrained LLM. So the same LLM can be used for multiple tasks by adding small weights without having to replace the entire model. huggingface provides a nice <a href="https://github.com/huggingface/peft">library</a> for a lot of PEFT methods. 
</p>
<p align="justify">
In the following I will going to dive a bit deeper in how some of these methods work. We will cover Prefix Tuning, Adapters and Low Rank Adaptation (LoRA).
</p>
<h2 id="prefix-tuning">Prefix Tuning</h2>
<p align="justify">
There exists different forms of prompt tuning, one of them is hard prompt tuning, also called prompt engineering or in context learning, where you change the input to the model, e.g. provide examples for how the model should answer. This form of tuning is non-differentiable, so the weights don't change and you don't add any weights. Prefix tuning is a form of soft prompt tuning where you concatenate a trainable tensor to the embeddings of the input tokens. This tensor is trainable, so you add a small amount of weights. The model parameters are kept frozen and you just optimize a small continuous task-specific vector which is called prefix.  
</p>
<figure class="align-center ">
    <img loading="lazy" src="/imgs/parameter_efficient_llm_finetuning/finetuning_vs_prefix_tuning.png#center"
         alt="Finetuning vs. Prefix Tuning" width="70%"/> <figcaption>
            <p>Figure 1. Finetuning vs. Prefix Tuning</p>
        </figcaption>
</figure>

<p align="justify">
Prefix tuning shines especially in low-data settings and the extrapolation to new tasks, e.g. summarization of texts with different topics, is better. It has up to 1000x fewer parameters to learn than in a fine-tuning setting. Another very cool thing is, that it enables personalization by having a different prefix per user trained only on the user data (no cross-contamination) and you could do batch processing of multiple users/tasks and one LLM. 
</p>
<h2 id="adapters">Adapters</h2>
<p align="justify">
Adapter methods are somewhat related to prefix tuning as they also add additional trainable parameters to the original LLM. Instead of prepending prefixes to the input embeddings, you add adapter layers into the transformer blocks. As you can see in the figure down below, the fully connected network in the adapter module has a bottleneck structure similar to an autoencoder which keeps the number of added parameters low and makes the method quite efficient.
</p>
<figure class="align-center ">
    <img loading="lazy" src="/imgs/parameter_efficient_llm_finetuning/adapter_module_layout.png#center"
         alt="Adapter Module Layout" width="70%"/> <figcaption>
            <p>Figure 2. Adapter Module Layout</p>
        </figcaption>
</figure>

<p align="justify">
In the orginal adapter paper, the authors trained a BERT model with this method and reached a modeling performance comparable to a fully finetuned BERT model while only requiring the training of 3.6% of the parameters. Based on the original prefix tuning paper, the performance of adapters matches the performance of prefix tuning of 0.1% of the parameters at 3%, which makes it less efficient.
</p>
<p align="justify">
Llama-Adapter combines the two ideas of prefix tuning and adapters for LLaMA models from Meta. Each transformer block in the model has its own distinct learned prefix, allowing for more tailored adaptation across different model layers. On top of that, LLaMA-Adapter introduces a zero-initialized attention mechanism coupled with gating.
</p>
<h2 id="low-rank-adaptation-lora">Low Rank Adaptation (LoRA)</h2>
<p align="justify">
LoRA and QLoRA 
</p>
<h2 id="conclusion">Conclusion</h2>
<p align="justify">
</p>
<h2 id="notes">Notes</h2>
<p align="justify">
- in-context learning -> models are able to perform tasks by providing them the right context (examples of your task) -> this is cool when you only have access to the model via an API or UI (this only works with generative models like the GPTs) 
- this works fine in some cases but for more specific things you still have to gather a dataset for the task and the specific domain and then finetune that model, this would result in superior results than just in-context learning (I don't know why they call this learning)
- what does finetuning even mean here? -> it basically means that you want to train the model on your task specific dataset 
- there are two ways to do this: 
1. the feature based approach, where you keep the transformer weights frozen (no training here) and just train a classifier which you feed the output embeddings of the frozen LLM (e.g. logistic regression model, random forest or XGBoost)
2. finetuning, where you train the whole model or a bigger portion of it (e.g. your just train the output layers after the Transformer blocks) 
- in general training the whole model will give you the best results but it is also the most expensive one    
- the problem is, that the currently best performing models are so big that there is no way that you can finetune this thing on your personal computer anymore
- so the question of how to utilize them more efficiently and effectively has become a very active area 
- people want to run those models on their laptops or desktop pcs without buying multiple graphics cards 
- so what do you do when in-context learning doesnt cut it for your use case and you don't have the compute to finetune those bigger models?
- researchers developed several techniques to make the finetuning of LLMs much more efficient by training just a small number of parameters
- I try to explain some of the most popular parameter-efficient finetuning techniques (PEFT) in this blogpost: Prefix Tuning, Adapters, Low Rank Adaptation (LoRA)
<p>and Baogao et. al wrote a paper comparing a lot of these methods and introduced HiWi</p>
</p>
<h2 id="references">References</h2>
<p>Sebastian Raschka - Understanding Parameter Efficient Finetuning of Large Language Models: From Prefix Tuning to LLaMA-Adapters (2023)
<a href="https://lightning.ai/pages/community/article/understanding-llama-adapters/">https://lightning.ai/pages/community/article/understanding-llama-adapters/</a></p>
<p>Sebastian Raschka - Parameter-Efficient LLM Finetuning With Low Rank Adaptation (2023)
<a href="https://lightning.ai/pages/community/tutorial/lora-llm/">https://lightning.ai/pages/community/tutorial/lora-llm/</a></p>
<p>Edward Hu et. al - LoRA: Low-Rank Adaptation of Large Language Models (2021)
<a href="https://arxiv.org/pdf/2106.09685.pdf">https://arxiv.org/pdf/2106.09685.pdf</a></p>
<p>Renrui Zhang et. al - LLaMA-Adapter: Efficient Fine-tuning of Language Models with Zero-init Attention (2023)
<a href="https://arxiv.org/pdf/2303.16199.pdf">https://arxiv.org/pdf/2303.16199.pdf</a></p>
<p>Xiang Lisa Li - Prefix-Tuning: Optimizing Continuous Prompts for Generation (2021)
<a href="https://arxiv.org/pdf/2101.00190.pdf">https://arxiv.org/pdf/2101.00190.pdf</a></p>
<p>Tim Dettmers et. al - QLORA: Efficient Finetuning of Quantized LLMs (2023)
<a href="https://arxiv.org/pdf/2305.14314.pdf">https://arxiv.org/pdf/2305.14314.pdf</a></p>
<p>Parameter-Efficient Fine-Tuning without Introducing New Latency (2023)
<a href="https://arxiv.org/pdf/2305.16742.pdf">https://arxiv.org/pdf/2305.16742.pdf</a></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
